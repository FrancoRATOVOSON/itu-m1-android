// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstname String @map("first_name")
  lastname String @map("last_name")
  password String
  subscriptions Subscription[]
  progressions Progression[]
  @@index([email])
  @@map("users")
}

model Course {
  id Int @id @default(autoincrement())
  title String
  description String
  coverUrl String @map("cover_url")
  chapters Chapter[]
  subscriptions Subscription[]
  tags TagOnCourse[]
  @@map("courses")
}

model TagOnCourse {
  courseId Int @map("course_id")
  course Course @relation(fields: [courseId], references: [id])
  tagValue String @map("tag_value")
  tag Tag @relation(fields: [tagValue], references: [value])
  @@id([courseId, tagValue])
  @@map("tag_on_course")
}

model Tag {
  value String @id
  tagOnCourse TagOnCourse[]
  @@map("tags")
}

model Subscription {
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: SetNull)
  courseId Int @map("course_id")
  course Course @relation(fields: [courseId], references: [id], onDelete: SetNull)
  @@id([userId, courseId])
  @@map("subscriptions")
}

model Chapter {
  id Int @id @default(autoincrement())
  title String
  description String
  videoUrl String @map("video_url")
  courseId Int @map("course_id")
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  evaluation Evaluation?
  progressions Progression[]
  @@map("chapters")
}

model Evaluation {
  id Int @id @default(autoincrement())
  questions Question[]
  chapterId Int @map("chapter_id")
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  @@map("evalutations")
}

model Question {
  id Int @id @default(autoincrement())
  label String
  Option Option[] @relation("question_Option")
  answerId Int @map("answer_id")
  answer Option @relation(name: "question_answer", fields: [answerId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  evaluationId Int @map("evaluation_id")
  evaluation Evaluation @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  giverAnswers Answer[]
  @@map("questions")
}

model Option {
  id Int @id @default(autoincrement())
  value String
  questionId Int @map("question_id")
  question Question @relation(name: "question_Option", fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  answered Question? @relation("question_answer")
  selection Answer[]
  @@map("options")
}

model Progression {
  userId Int @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapterId Int @map("chapter_id")
  chapter Chapter @relation(fields: [chapterId], references: [id])
  tests Answer[]
  isFinished Boolean @default(false) @map("is_finished")
  @@id([userId, chapterId])
  @@map("progressions")
}

model Answer {
  userId Int @map("user_id")
  progression Progression @relation(fields: [userId], references: [userId])
  questionId Int @map("question_id")
  question Question @relation(fields: [questionId], references: [id])
  selectedOptionId Int @map("selected_option_id")
  selectedOption Option @relation(fields: [selectedOptionId], references: [id])
  @@id([userId, questionId])
  @@map("answers")
}
